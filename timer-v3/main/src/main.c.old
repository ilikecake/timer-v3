/*
 * @brief FreeRTOS Blinky example
 *
 * @note
 * Copyright(C) NXP Semiconductors, 2012
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#include "board.h"
#include "FreeRTOS.h"
#include "task.h"

//#include "board.h"
#include <stdio.h>
#include <string.h>

//TODO: Add a subfolder for usb stuff
#include "app_usbd_cfg.h"
#include "cdc_vcom.h"

#include "main.h"

/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* Sets up system hardware */
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Board_Init();
}

/* LED0 toggle thread */
/*static void vLEDTask0(void *pvParameters) {
	bool LedState = false;
	while (1) {
		Board_LED_Set(2, LedState);
		LedState = (bool) !LedState;

		vTaskDelay(configTICK_RATE_HZ/2);
	}
}*/

/* LED1 toggle thread */
static void vLEDTask1(void *pvParameters) {
	bool LedState = false;

	while (1) {
		Board_LED_Set(1, LedState);
		LedState = (bool) !LedState;
		vTaskDelay(configTICK_RATE_HZ*2);
	}
}

/* LED2 toggle thread */
static void vConsoleTask(void *pvParameters)
{
	//unsigned portBASE_TYPE uxHighWaterMark;
	uint32_t prompt = 0, rdCnt = 0;

	while (1)
	{

		if ((vcom_connected() != 0) && (prompt == 0))
		{
			vcom_write((uint8_t *)"Hello World!!\r\n", 15);
			prompt = 1;
		}
		if (prompt)
		{
			rdCnt = vcom_bread(&g_rxBuff[0], 256);
			if (rdCnt)
			{
				CommandGetInputChar((char)g_rxBuff[0]);
			}
			RunCommand();
		}
		vTaskDelay(100);
	}
}

/*****************************************************************************
 * Public functions
 ****************************************************************************/

/**
 * @brief	main routine for FreeRTOS
 * @return	Nothing, function should not exit
 */
int main(void)
{
	prvSetupHardware();

	Board_LED_Set(2, 0);
	Board_LED_Set(1, 0);
	Board_LED_Set(3, 0);

	i2c_app_init(I2C0, I2C_DEFAULT_SPEED);
	//DS3232M_Init();
	vcom_init();

	/* LED1 toggle thread */
	xTaskCreate(vLEDTask1, (signed char *) "vTaskLed1", configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL), (xTaskHandle *) NULL);

	/* LED2 toggle thread */
	xTaskCreate(vConsoleTask, (signed char *) "vConsole", ( unsigned short )300, NULL, (tskIDLE_PRIORITY + 2UL), (xTaskHandle *) NULL);

	/* LED0 toggle thread */
	//xTaskCreate(vLEDTask0, (signed char *) "vTaskLed0", configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL), (xTaskHandle *) NULL);

	/* Start the scheduler */
	vTaskStartScheduler();

	/* Should never arrive here */
	return 1;
}
